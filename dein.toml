[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#auto_recache = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <silent> ,f :Denite file/rec<CR>
  nmap <silent> ,g :Denite grep<CR>
  nmap <silent> ,b :Denite buffer<CR>
  nmap <silent> ,l :Denite line<CR>

  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  " launch deoplete at vim startup
  let g:deoplete#enable_at_startup=1

  call deoplete#custom#option({
  \   'auto_complete_delay': 0,
  \   'auto_complete_start_length': 1,
  \   'skip_multibyte': v:true,
  \   'smart_case': v:true,
  \ })

'''

# vim-lsp
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_enabled = 1
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
# /vim-lsp

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

# comments
[[plugins]]
repo = 'tomtom/tcomment_vim'

# 's' command
[[plugins]]
repo = 'tpope/vim-surround'

# file navigation
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeShowBookmarks=0
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeDirArrows = 1
  let NERDTreeIgnore = ['\.git$', 'node_modules']

  autocmd StdinReadPre * let s:std_in=1
  autocmd vimenter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  map <C-a> :NERDTreeToggle<CR>

  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

# sync nerdtree between all tabs
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
" デフォルトで表示
  let g:nerdtree_tabs_open_on_console_startup = 1
  let g:nerdtree_tabs_focus_on_files = 1
'''

[[plugins]]
repo = 'mg979/vim-visual-multi'

# auto close html tags
[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
  let closetag_filenames = '*.html,*.xhtml,*.php,*.vue'
  let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.vue'
  let g:closetag_filetypes = 'html,xhtml,php,vue'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,vue'
  let g:closetag_emptyTags_caseSensitive = 1
  let g:closetag_shortcut = '>'
  let g:closetag_close_shortcut = '<leader>>'
'''

# auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'vue']
hook_add = '''
  imap ,, <C-y>,
  let g:user_emmet_settings = {
  \   'variables': {
  \     'lang' : 'ja'
  \   },
  \   'html': {
  \     'snippets': {
  \        'html:5': "<!DOCTYPE html>\n"
  \          ."<html lang=\"${lang}\">\n"
  \          ."<head>\n"
  \          ."  <meta charset=\"${charset}\">\n"
  \          ."  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
  \          ."  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
  \          ."  <title></title>\n"
  \          ."</head>\n"
  \          ."<body>\n\t${child}|\n</body>\n"
  \          ."</html>",
  \     }
  \   }
  \ }
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  let g:ale_completion_enabled = 1
  "/**
  " *  ale: fixer
  " */
  let g:ale_fixers = {
  \   'python': ['autopep8', 'isort'],
  \   'php': ['phpcbf'],
  \ }

  " format on save
  let g:ale_fix_on_save = 1

  "/**
  " *  ale: lint
  " */
  let g:ale_linters = {
  \   'python': ['flake8'],
  \   'php': ['phpcs --standard=PSR2', 'php -l'],
  \ }

  " ale_lintersに登録されているもののみ
  let g:ale_linters_explicit = 1

  let g:ale_lint_on_text_changed = 1
  let g:ale_lint_on_insert_leave = 1
  let g:ale_lint_on_enter = 1

  " 行数の左に常にマーク用領域を表示
  let g:ale_sign_column_always = 1

  " lint結果のマーク
  let g:ale_sign_error = 'E:'
  let g:ale_sign_warning = 'W:'

  " 保存時実行
  let g:ale_lint_on_save = 1

  " 警告パネルの表示でなくquickfixを実行する
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0

  " 警告パネルを表示
  let g:ale_open_list = 1

  " エラーと警告がなくなっても開いたままにする
  let g:ale_keep_list_window_open = 0
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
  autocmd FileType vue syntax sync fromstart
'''

# toml syntax highlight
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  " 定義ジャンプ等のキーバインドを無効
  let g:go_def_mapping_enabled = 0
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_gopls_enabled = 1
'''

